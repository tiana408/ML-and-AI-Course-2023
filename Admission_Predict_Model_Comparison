{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.028121,
          "end_time": "2020-10-01T15:12:18.278017",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.249896",
          "status": "completed"
        },
        "tags": [],
        "id": "1ztLn7eM6YZ5"
      },
      "source": [
        "# University Admission Prediction"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.030297,
          "end_time": "2020-10-01T15:12:18.337392",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.307095",
          "status": "completed"
        },
        "tags": [],
        "id": "1cRQ_KOA6YZ7"
      },
      "source": [
        "  In this exercise the goal is to predict weather a student can enter his/her desired university or not.\n",
        "\n",
        "  The data set, as you will see, contains the information of 400 students with 9 attributes(columns) including Serial number of each students(our we can say each sample),\n",
        "the [Graduate Record Examinations (GRE)](https://en.wikipedia.org/wiki/Graduate_Record_Examinations),\n",
        "the [Test of English as a Foreign Language (TOEFL)](https://en.wikipedia.org/wiki/Test_of_English_as_a_Foreign_Language#:~:text=The%20TOEFL%20iBT%20test%20is,to%20determine%20the%20total%20score.),\n",
        "the [statement of purpose (SOP)](https://blog.nomadcredit.com/statement-purpose-explanation-international-students/),\n",
        "the [Letter of Recommendation (LOR)](https://whizstorm.com/what-is-a-letter-of-recommendation),\n",
        "the [Culmulative Grade Point Average(CGPA)](https://byjus.com/cbse/cgpa-calculator/)\n",
        "scores, the University rating, and also weather the student has at least one research or not."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.029381,
          "end_time": "2020-10-01T15:12:18.394411",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.365030",
          "status": "completed"
        },
        "tags": [],
        "id": "Y4NsSh1u6YZ7"
      },
      "source": [
        "#### The purpose is to find a good reason to use Logistic Regression and discuss about the downsides of it with respect to how we can implement it from scratch\n",
        "Lets role into the problem."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.027936,
          "end_time": "2020-10-01T15:12:18.450454",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.422518",
          "status": "completed"
        },
        "tags": [],
        "id": "Jwu4MT-46YZ7"
      },
      "source": [
        "# Importing Basic Libararies"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:18.511081Z",
          "iopub.status.busy": "2020-10-01T15:12:18.510267Z",
          "iopub.status.idle": "2020-10-01T15:12:18.514035Z",
          "shell.execute_reply": "2020-10-01T15:12:18.513329Z"
        },
        "papermill": {
          "duration": 0.036186,
          "end_time": "2020-10-01T15:12:18.514171",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.477985",
          "status": "completed"
        },
        "tags": [],
        "id": "zwtdc4TE6YZ8"
      },
      "outputs": [],
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt # Visualizing\n",
        "import copy"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.027654,
          "end_time": "2020-10-01T15:12:18.570851",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.543197",
          "status": "completed"
        },
        "tags": [],
        "id": "m7eU46UD6YZ8"
      },
      "source": [
        "# Importing Our Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:18.640122Z",
          "iopub.status.busy": "2020-10-01T15:12:18.638533Z",
          "iopub.status.idle": "2020-10-01T15:12:18.672033Z",
          "shell.execute_reply": "2020-10-01T15:12:18.672585Z"
        },
        "papermill": {
          "duration": 0.073398,
          "end_time": "2020-10-01T15:12:18.672763",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.599365",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8sBjJA126YZ8",
        "outputId": "9b557837-aa70-42ef-aa02-e5fa9554dcae"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Serial No.  GRE Score  TOEFL Score  University Rating  SOP  LOR   CGPA  \\\n",
              "0           1        337          118                  4  4.5   4.5  9.65   \n",
              "1           2        324          107                  4  4.0   4.5  8.87   \n",
              "2           3        316          104                  3  3.0   3.5  8.00   \n",
              "3           4        322          110                  3  3.5   2.5  8.67   \n",
              "4           5        314          103                  2  2.0   3.0  8.21   \n",
              "\n",
              "   Research  Chance of Admit   \n",
              "0         1              0.92  \n",
              "1         1              0.76  \n",
              "2         1              0.72  \n",
              "3         1              0.80  \n",
              "4         0              0.65  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-63dd1275-2ce3-40df-ba65-e828b6f012a6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Serial No.</th>\n",
              "      <th>GRE Score</th>\n",
              "      <th>TOEFL Score</th>\n",
              "      <th>University Rating</th>\n",
              "      <th>SOP</th>\n",
              "      <th>LOR</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Research</th>\n",
              "      <th>Chance of Admit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>337</td>\n",
              "      <td>118</td>\n",
              "      <td>4</td>\n",
              "      <td>4.5</td>\n",
              "      <td>4.5</td>\n",
              "      <td>9.65</td>\n",
              "      <td>1</td>\n",
              "      <td>0.92</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>324</td>\n",
              "      <td>107</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.5</td>\n",
              "      <td>8.87</td>\n",
              "      <td>1</td>\n",
              "      <td>0.76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>316</td>\n",
              "      <td>104</td>\n",
              "      <td>3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>3.5</td>\n",
              "      <td>8.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0.72</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>322</td>\n",
              "      <td>110</td>\n",
              "      <td>3</td>\n",
              "      <td>3.5</td>\n",
              "      <td>2.5</td>\n",
              "      <td>8.67</td>\n",
              "      <td>1</td>\n",
              "      <td>0.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>314</td>\n",
              "      <td>103</td>\n",
              "      <td>2</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>8.21</td>\n",
              "      <td>0</td>\n",
              "      <td>0.65</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63dd1275-2ce3-40df-ba65-e828b6f012a6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-63dd1275-2ce3-40df-ba65-e828b6f012a6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-63dd1275-2ce3-40df-ba65-e828b6f012a6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7ccd86ee-693a-4f19-943b-d7e1cd4559cb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7ccd86ee-693a-4f19-943b-d7e1cd4559cb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7ccd86ee-693a-4f19-943b-d7e1cd4559cb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "dataset = pd.read_csv(\"/content/Admission_Predict.csv\")\n",
        "pd.set_option('display.max_columns',len(dataset.columns))\n",
        "dataset.head(5)# gives us the first five of the sample dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:18.736724Z",
          "iopub.status.busy": "2020-10-01T15:12:18.735796Z",
          "iopub.status.idle": "2020-10-01T15:12:18.739963Z",
          "shell.execute_reply": "2020-10-01T15:12:18.740537Z"
        },
        "papermill": {
          "duration": 0.038305,
          "end_time": "2020-10-01T15:12:18.740712",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.702407",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DA8PGwjO6YZ9",
        "outputId": "8285d18d-650b-4419-a9ce-17dce8fa41ec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Serial No.', 'GRE Score', 'TOEFL Score', 'University Rating', 'SOP',\n",
              "       'LOR ', 'CGPA', 'Research', 'Chance of Admit '],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "#Let's look at the exact columns' name\n",
        "dataset.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.03203,
          "end_time": "2020-10-01T15:12:18.803111",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.771081",
          "status": "completed"
        },
        "tags": [],
        "id": "3cI0m4Ds6YZ9"
      },
      "source": [
        "I'll cut the Serial no. attribute because it's not going to affect our dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:18.885075Z",
          "iopub.status.busy": "2020-10-01T15:12:18.881920Z",
          "iopub.status.idle": "2020-10-01T15:12:18.888352Z",
          "shell.execute_reply": "2020-10-01T15:12:18.887515Z"
        },
        "papermill": {
          "duration": 0.052087,
          "end_time": "2020-10-01T15:12:18.888503",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.836416",
          "status": "completed"
        },
        "tags": [],
        "id": "qH7PYq9Q6YZ9"
      },
      "outputs": [],
      "source": [
        "# we are goning to seprate the class label ( Chance of Admit ) from the rest.\n",
        "Y = dataset.iloc[:,-1].values\n",
        "X = dataset.drop([\"Serial No.\",\"Chance of Admit \"],axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.030205,
          "end_time": "2020-10-01T15:12:18.950794",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.920589",
          "status": "completed"
        },
        "tags": [],
        "id": "B4va5frQ6YZ9"
      },
      "source": [
        "# Visualizing Our Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.033277,
          "end_time": "2020-10-01T15:12:19.014633",
          "exception": false,
          "start_time": "2020-10-01T15:12:18.981356",
          "status": "completed"
        },
        "tags": [],
        "id": "FHzrlQUA6YZ9"
      },
      "source": [
        "One of the most important aspect of data analyzing, is to first, have a clear vision of the dataset and finding out how we can\n",
        "rescailing, regenerating(for missing values), and most importantly imabalancing them.\n",
        "\n",
        "So lets do this step by step..."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:19.097041Z",
          "iopub.status.busy": "2020-10-01T15:12:19.096105Z",
          "iopub.status.idle": "2020-10-01T15:12:19.101308Z",
          "shell.execute_reply": "2020-10-01T15:12:19.100574Z"
        },
        "papermill": {
          "duration": 0.055431,
          "end_time": "2020-10-01T15:12:19.101456",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.046025",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8uoZ2wP06YZ-",
        "outputId": "a59d5d77-fc64-4826-d641-3fd0fa8c7820"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 400 entries, 0 to 399\n",
            "Data columns (total 9 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Serial No.         400 non-null    int64  \n",
            " 1   GRE Score          400 non-null    int64  \n",
            " 2   TOEFL Score        400 non-null    int64  \n",
            " 3   University Rating  400 non-null    int64  \n",
            " 4   SOP                400 non-null    float64\n",
            " 5   LOR                400 non-null    float64\n",
            " 6   CGPA               400 non-null    float64\n",
            " 7   Research           400 non-null    int64  \n",
            " 8   Chance of Admit    400 non-null    float64\n",
            "dtypes: float64(4), int64(5)\n",
            "memory usage: 28.2 KB\n"
          ]
        }
      ],
      "source": [
        "dataset.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.030323,
          "end_time": "2020-10-01T15:12:19.165502",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.135179",
          "status": "completed"
        },
        "tags": [],
        "id": "8mSIlmQ06YZ-"
      },
      "source": [
        "As we can see here, we do not have any missing values.\n",
        "(the Non-Null count column)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.032173,
          "end_time": "2020-10-01T15:12:19.231093",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.198920",
          "status": "completed"
        },
        "tags": [],
        "id": "xHKfnggG6YZ-"
      },
      "source": [
        "## Description"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:19.306369Z",
          "iopub.status.busy": "2020-10-01T15:12:19.305504Z",
          "iopub.status.idle": "2020-10-01T15:12:19.339781Z",
          "shell.execute_reply": "2020-10-01T15:12:19.339108Z"
        },
        "papermill": {
          "duration": 0.076392,
          "end_time": "2020-10-01T15:12:19.339933",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.263541",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "WPyDA7mc6YZ-",
        "outputId": "82c2c531-8881-4177-857d-38539787f1e4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        GRE Score  TOEFL Score  University Rating         SOP        LOR   \\\n",
              "count  400.000000   400.000000         400.000000  400.000000  400.000000   \n",
              "mean   316.807500   107.410000           3.087500    3.400000    3.452500   \n",
              "std     11.473646     6.069514           1.143728    1.006869    0.898478   \n",
              "min    290.000000    92.000000           1.000000    1.000000    1.000000   \n",
              "25%    308.000000   103.000000           2.000000    2.500000    3.000000   \n",
              "50%    317.000000   107.000000           3.000000    3.500000    3.500000   \n",
              "75%    325.000000   112.000000           4.000000    4.000000    4.000000   \n",
              "max    340.000000   120.000000           5.000000    5.000000    5.000000   \n",
              "\n",
              "             CGPA    Research  \n",
              "count  400.000000  400.000000  \n",
              "mean     8.598925    0.547500  \n",
              "std      0.596317    0.498362  \n",
              "min      6.800000    0.000000  \n",
              "25%      8.170000    0.000000  \n",
              "50%      8.610000    1.000000  \n",
              "75%      9.062500    1.000000  \n",
              "max      9.920000    1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2a683cbd-9c6b-49a2-bffe-110ef3bd5dbd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GRE Score</th>\n",
              "      <th>TOEFL Score</th>\n",
              "      <th>University Rating</th>\n",
              "      <th>SOP</th>\n",
              "      <th>LOR</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Research</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "      <td>400.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>316.807500</td>\n",
              "      <td>107.410000</td>\n",
              "      <td>3.087500</td>\n",
              "      <td>3.400000</td>\n",
              "      <td>3.452500</td>\n",
              "      <td>8.598925</td>\n",
              "      <td>0.547500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>11.473646</td>\n",
              "      <td>6.069514</td>\n",
              "      <td>1.143728</td>\n",
              "      <td>1.006869</td>\n",
              "      <td>0.898478</td>\n",
              "      <td>0.596317</td>\n",
              "      <td>0.498362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>290.000000</td>\n",
              "      <td>92.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>6.800000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>308.000000</td>\n",
              "      <td>103.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>8.170000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>317.000000</td>\n",
              "      <td>107.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>3.500000</td>\n",
              "      <td>8.610000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>325.000000</td>\n",
              "      <td>112.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>9.062500</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>340.000000</td>\n",
              "      <td>120.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>9.920000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a683cbd-9c6b-49a2-bffe-110ef3bd5dbd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2a683cbd-9c6b-49a2-bffe-110ef3bd5dbd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2a683cbd-9c6b-49a2-bffe-110ef3bd5dbd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b28d50e7-f460-484c-a5a8-32d75a871909\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b28d50e7-f460-484c-a5a8-32d75a871909')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b28d50e7-f460-484c-a5a8-32d75a871909 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "X.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.031128,
          "end_time": "2020-10-01T15:12:19.404125",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.372997",
          "status": "completed"
        },
        "tags": [],
        "id": "o5ZbppRy6YZ-"
      },
      "source": [
        "**MEAN** : with having means and take a look at the median(50%) of each attribute,we can rest assured that our dataset does not contain outliers.\n",
        "*the outliers are dangarous enemies for linear regressions and logistic regression.*\n",
        "\n",
        "But, we can not rely on these information without having a survey on the histograms."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.030397,
          "end_time": "2020-10-01T15:12:19.467657",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.437260",
          "status": "completed"
        },
        "tags": [],
        "id": "-goBb-bQ6YZ-"
      },
      "source": [
        "### Histograms"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:19.541686Z",
          "iopub.status.busy": "2020-10-01T15:12:19.540854Z",
          "iopub.status.idle": "2020-10-01T15:12:21.196318Z",
          "shell.execute_reply": "2020-10-01T15:12:21.196974Z"
        },
        "papermill": {
          "duration": 1.697125,
          "end_time": "2020-10-01T15:12:21.197158",
          "exception": false,
          "start_time": "2020-10-01T15:12:19.500033",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 807
        },
        "id": "IlMeXOao6YZ-",
        "outputId": "6d6bb675-0d5d-44d8-a805-4363974af927"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 7 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "columns = X.columns\n",
        "fig = plt.figure(figsize=(8,8))\n",
        "for i in range(0,7):\n",
        "\n",
        "    ax = plt.subplot(3, 3, i+1)\n",
        "    ax.hist(X[columns[i]],bins = 20, color = 'blue', edgecolor = 'black')\n",
        "\n",
        "    #set title name of each\n",
        "    ax.set_title(columns[i])\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.032375,
          "end_time": "2020-10-01T15:12:21.263320",
          "exception": false,
          "start_time": "2020-10-01T15:12:21.230945",
          "status": "completed"
        },
        "tags": [],
        "id": "KR4IlqwJ6YZ-"
      },
      "source": [
        "Histograms are a good informative plots to handle previous missunderstandings of our dataset, especially for continous varibale distribution.\n",
        "for instance, at the first plot of GRE score, the mean is approximatley 316, but we have biomodal distribution. In others words there is two peaks for our samples in term of this variable. in data analyzing, this means maybe, you can devide this variable into the gender subplots of students, which can lead to so much more information.\n",
        "\n",
        "Another view of the histograms of SOP, LOR they are skewed to the left. and the reason maybe its that for a good application you need to have a better scores at these exams.\n",
        "\n",
        "And so musch more information that you can get from histograms to analyizng your data.\n",
        "\n",
        "#### (if you can help to get more information from the plots abive ,i'll appriciate it:)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.031147,
          "end_time": "2020-10-01T15:12:21.326611",
          "exception": false,
          "start_time": "2020-10-01T15:12:21.295464",
          "status": "completed"
        },
        "tags": [],
        "id": "fz4u7-nI6YZ-"
      },
      "source": [
        "## Correlations"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:21.415116Z",
          "iopub.status.busy": "2020-10-01T15:12:21.413744Z",
          "iopub.status.idle": "2020-10-01T15:12:21.420127Z",
          "shell.execute_reply": "2020-10-01T15:12:21.419103Z"
        },
        "papermill": {
          "duration": 0.062073,
          "end_time": "2020-10-01T15:12:21.420283",
          "exception": false,
          "start_time": "2020-10-01T15:12:21.358210",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "7ORQrZz-6YZ-",
        "outputId": "71cc97b3-0047-4597-b1c3-7044f9fde804"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   GRE Score  TOEFL Score  University Rating       SOP  \\\n",
              "GRE Score           1.000000     0.835977           0.668976  0.612831   \n",
              "TOEFL Score         0.835977     1.000000           0.695590  0.657981   \n",
              "University Rating   0.668976     0.695590           1.000000  0.734523   \n",
              "SOP                 0.612831     0.657981           0.734523  1.000000   \n",
              "LOR                 0.557555     0.567721           0.660123  0.729593   \n",
              "CGPA                0.833060     0.828417           0.746479  0.718144   \n",
              "Research            0.580391     0.489858           0.447783  0.444029   \n",
              "\n",
              "                       LOR       CGPA  Research  \n",
              "GRE Score          0.557555  0.833060  0.580391  \n",
              "TOEFL Score        0.567721  0.828417  0.489858  \n",
              "University Rating  0.660123  0.746479  0.447783  \n",
              "SOP                0.729593  0.718144  0.444029  \n",
              "LOR                1.000000  0.670211  0.396859  \n",
              "CGPA               0.670211  1.000000  0.521654  \n",
              "Research           0.396859  0.521654  1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce8a79c5-fdb5-44fd-9710-4bc512434c93\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>GRE Score</th>\n",
              "      <th>TOEFL Score</th>\n",
              "      <th>University Rating</th>\n",
              "      <th>SOP</th>\n",
              "      <th>LOR</th>\n",
              "      <th>CGPA</th>\n",
              "      <th>Research</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>GRE Score</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.835977</td>\n",
              "      <td>0.668976</td>\n",
              "      <td>0.612831</td>\n",
              "      <td>0.557555</td>\n",
              "      <td>0.833060</td>\n",
              "      <td>0.580391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TOEFL Score</th>\n",
              "      <td>0.835977</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.695590</td>\n",
              "      <td>0.657981</td>\n",
              "      <td>0.567721</td>\n",
              "      <td>0.828417</td>\n",
              "      <td>0.489858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>University Rating</th>\n",
              "      <td>0.668976</td>\n",
              "      <td>0.695590</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.734523</td>\n",
              "      <td>0.660123</td>\n",
              "      <td>0.746479</td>\n",
              "      <td>0.447783</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SOP</th>\n",
              "      <td>0.612831</td>\n",
              "      <td>0.657981</td>\n",
              "      <td>0.734523</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.729593</td>\n",
              "      <td>0.718144</td>\n",
              "      <td>0.444029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>LOR</th>\n",
              "      <td>0.557555</td>\n",
              "      <td>0.567721</td>\n",
              "      <td>0.660123</td>\n",
              "      <td>0.729593</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.670211</td>\n",
              "      <td>0.396859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CGPA</th>\n",
              "      <td>0.833060</td>\n",
              "      <td>0.828417</td>\n",
              "      <td>0.746479</td>\n",
              "      <td>0.718144</td>\n",
              "      <td>0.670211</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.521654</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Research</th>\n",
              "      <td>0.580391</td>\n",
              "      <td>0.489858</td>\n",
              "      <td>0.447783</td>\n",
              "      <td>0.444029</td>\n",
              "      <td>0.396859</td>\n",
              "      <td>0.521654</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce8a79c5-fdb5-44fd-9710-4bc512434c93')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ce8a79c5-fdb5-44fd-9710-4bc512434c93 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ce8a79c5-fdb5-44fd-9710-4bc512434c93');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-64042f6a-f233-4e03-9f23-298eecb286c9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-64042f6a-f233-4e03-9f23-298eecb286c9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-64042f6a-f233-4e03-9f23-298eecb286c9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "X.corr()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.032968,
          "end_time": "2020-10-01T15:12:21.489374",
          "exception": false,
          "start_time": "2020-10-01T15:12:21.456406",
          "status": "completed"
        },
        "tags": [],
        "id": "aw0IR32X6YZ-"
      },
      "source": [
        "So, there are some correlations between attributes, but before we judge, lets have more clear vision of these correaltion with heatmap!!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.032571,
          "end_time": "2020-10-01T15:12:21.555004",
          "exception": false,
          "start_time": "2020-10-01T15:12:21.522433",
          "status": "completed"
        },
        "tags": [],
        "id": "zmOTr2l26YZ-"
      },
      "source": [
        "### Heatmap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:21.629698Z",
          "iopub.status.busy": "2020-10-01T15:12:21.628873Z",
          "iopub.status.idle": "2020-10-01T15:12:23.454966Z",
          "shell.execute_reply": "2020-10-01T15:12:23.454160Z"
        },
        "papermill": {
          "duration": 1.866094,
          "end_time": "2020-10-01T15:12:23.455096",
          "exception": false,
          "start_time": "2020-10-01T15:12:21.589002",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 728
        },
        "id": "JeUXn9iS6YZ_",
        "outputId": "d86ef9ac-9bfe-4e92-c585-7f93bec43876"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import seaborn as sb # for vuisualizing\n",
        "fig, ax = plt.subplots(figsize=(7,7))\n",
        "sb.heatmap(X.corr(),linewidth = 0.5,annot=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036811,
          "end_time": "2020-10-01T15:12:23.537990",
          "exception": false,
          "start_time": "2020-10-01T15:12:23.501179",
          "status": "completed"
        },
        "tags": [],
        "id": "EmCaLele6YZ_"
      },
      "source": [
        "Now we can see that there is not such a high correlation to handle it or drop some of them.\n",
        "because the value of each variance should at most be 1 or -1 to lead us to the conclusion of dropping the attributes that have correlation and using one of them based on our consideration of each.\n",
        "\n",
        "But does it always work to drop the correleated attributes?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.040639,
          "end_time": "2020-10-01T15:12:23.615499",
          "exception": false,
          "start_time": "2020-10-01T15:12:23.574860",
          "status": "completed"
        },
        "tags": [],
        "id": "6ADNU6wv6YZ_"
      },
      "source": [
        "The answer is 'NO'.\n",
        "\n",
        "The correct answer to it is laid under Multicollinearity.\n",
        "But what is multicollinearity or collinearity?\n",
        "\n",
        "> \"_In statistics, multicollinearity (also collinearity) is a phenomenon in which one predictor variable in a multiple regression model can be linearly predicted from the others with a substantial degree of accuracy._\" ___Wikipedia___\n",
        "\n",
        "According to the definition, there is kind of a relation between two or more attributes. It can affect our model by small degree. The real problem is that, if we have prefect correlation between variables, while the model are trying to find a perfect coefficient for one independent variable to predict the dependent one, it affects the coefficient of the other one, which makes it hard to estimate the coefficients independently.\n",
        "\n",
        "Obviously, this problem weakens the estimation of each independant variables, which leads us to not a perfect model to predict our dependant variables.\n",
        "But to cure this problem first you have to have a good reson for that, it's all depends on severity of the problem itself. For example if the correlation of GRE and TOEFEL is 1 or -1 then we have to solve the problem not just by dropping one of them, but by many remedies that statistically can prepare, related to Feature Engineering.\n",
        "\n",
        "Visit [Wekipedia](https://en.wikipedia.org/wiki/Multicollinearity#:~:text=Multicollinearity%20refers%20to%20a%20situation,equal%20to%201%20or%20%E2%88%921.) for more information.\n",
        "\n",
        "Lets dive into fitting our model!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.036684,
          "end_time": "2020-10-01T15:12:23.688371",
          "exception": false,
          "start_time": "2020-10-01T15:12:23.651687",
          "status": "completed"
        },
        "tags": [],
        "id": "mJZ0G4nz6YZ_"
      },
      "source": [
        "# Seprating the train and test dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:23.770055Z",
          "iopub.status.busy": "2020-10-01T15:12:23.769067Z",
          "iopub.status.idle": "2020-10-01T15:12:23.926674Z",
          "shell.execute_reply": "2020-10-01T15:12:23.927344Z"
        },
        "papermill": {
          "duration": 0.201734,
          "end_time": "2020-10-01T15:12:23.927512",
          "exception": false,
          "start_time": "2020-10-01T15:12:23.725778",
          "status": "completed"
        },
        "tags": [],
        "id": "zhfM-MHB6YZ_"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split #spiliting\n",
        "X_train,X_test,Y_train,Y_test = train_test_split(X.values,Y,test_size = 0.25,random_state = 1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.038334,
          "end_time": "2020-10-01T15:12:24.001505",
          "exception": false,
          "start_time": "2020-10-01T15:12:23.963171",
          "status": "completed"
        },
        "tags": [],
        "id": "AoN2GzXF6YZ_"
      },
      "source": [
        "# Fitting Logistic Regression Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:24.086850Z",
          "iopub.status.busy": "2020-10-01T15:12:24.085892Z",
          "iopub.status.idle": "2020-10-01T15:12:24.283021Z",
          "shell.execute_reply": "2020-10-01T15:12:24.282226Z"
        },
        "papermill": {
          "duration": 0.244019,
          "end_time": "2020-10-01T15:12:24.283160",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.039141",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "hpR4x3GS6YZ_",
        "outputId": "8228ef27-06e2-44b3-d868-99f802c42fdf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  n_iter_i = _check_optimize_result(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=0)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(random_state=0)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "threshold = 0.5\n",
        "Y_train_categorical = np.where(Y_train < threshold, 0, 1)\n",
        "\n",
        "classifier = LogisticRegression(random_state=0)\n",
        "classifier.fit(X_train, Y_train_categorical)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.038685,
          "end_time": "2020-10-01T15:12:24.358465",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.319780",
          "status": "completed"
        },
        "tags": [],
        "id": "IVzVXqfC6YZ_"
      },
      "source": [
        "OOPS.\n",
        "What's the problem?\n",
        "\n",
        "As you can see here the output of our dataset is continous to pass through for logistic regression which needs a label class; zero or one."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.041316,
          "end_time": "2020-10-01T15:12:24.437906",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.396590",
          "status": "completed"
        },
        "tags": [],
        "id": "c6Wb4sHc6YZ_"
      },
      "source": [
        "\n",
        "To scale these probablity-based output to 1 or 0 we have to set threshold.\n",
        "for instance consider a sigmoid function:\n",
        "![image.png](http://res.cloudinary.com/dyd911kmh/image/upload/f_auto,q_auto:best/v1534281880/image4_gw5mmv.png)\n",
        "![image.png](https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Logistic-curve.svg/480px-Logistic-curve.svg.png)\n",
        "See!! There is a curve shifting at the exact number of 0.5 of y_axis and in logistic regression usually we choose 0.5 to conclude that the all y's above the 0.5 scale to 1 and bellow this number scale to zero.\n",
        "but that's not always our optimal cut off!!\n",
        "in the following, first we are going to use a tricky solution and after that we are going to have a scientefic reason for how to pick our optimal threshold.\n",
        "\n",
        "Then lets figuring out how to choose our threshold for labling and how to correct it?!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.037231,
          "end_time": "2020-10-01T15:12:24.512725",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.475494",
          "status": "completed"
        },
        "tags": [],
        "id": "a8NMHevl6YZ_"
      },
      "source": [
        "### Tricky Solution"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.039182,
          "end_time": "2020-10-01T15:12:24.588898",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.549716",
          "status": "completed"
        },
        "tags": [],
        "id": "etY-uhUU6YZ_"
      },
      "source": [
        "one of a tricky solution is to estimate a range of thrsholding values:\n",
        "\n",
        "we will now make a possible list of our threshold and using all of them to get the best answer and result in term of accuracy by fitting a linear regression model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:24.723378Z",
          "iopub.status.busy": "2020-10-01T15:12:24.693118Z",
          "iopub.status.idle": "2020-10-01T15:12:24.791690Z",
          "shell.execute_reply": "2020-10-01T15:12:24.789988Z"
        },
        "papermill": {
          "duration": 0.162604,
          "end_time": "2020-10-01T15:12:24.791888",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.629284",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-k2sYWU36YZ_",
        "outputId": "1f3af817-6d77-4925-85c9-30c680454a44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ACCURACY OF  0.05  THRESHOLD :  1.0 \n",
            "\n",
            "ACCURACY OF  0.1  THRESHOLD :  1.0 \n",
            "\n",
            "ACCURACY OF  0.15  THRESHOLD :  1.0 \n",
            "\n",
            "ACCURACY OF  0.2  THRESHOLD :  1.0 \n",
            "\n",
            "ACCURACY OF  0.25  THRESHOLD :  1.0 \n",
            "\n",
            "ACCURACY OF  0.3  THRESHOLD :  1.0 \n",
            "\n",
            "ACCURACY OF  0.35  THRESHOLD :  0.99 \n",
            "\n",
            "ACCURACY OF  0.4  THRESHOLD :  0.98 \n",
            "\n",
            "ACCURACY OF  0.45  THRESHOLD :  0.96 \n",
            "\n",
            "ACCURACY OF  0.5  THRESHOLD :  0.92 \n",
            "\n",
            "ACCURACY OF  0.55  THRESHOLD :  0.91 \n",
            "\n",
            "ACCURACY OF  0.6  THRESHOLD :  0.9 \n",
            "\n",
            "ACCURACY OF  0.65  THRESHOLD :  0.81 \n",
            "\n",
            "ACCURACY OF  0.7  THRESHOLD :  0.9 \n",
            "\n",
            "ACCURACY OF  0.75  THRESHOLD :  0.93 \n",
            "\n",
            "ACCURACY OF  0.8  THRESHOLD :  0.94 \n",
            "\n",
            "ACCURACY OF  0.85  THRESHOLD :  0.96 \n",
            "\n",
            "ACCURACY OF  0.9  THRESHOLD :  0.96 \n",
            "\n",
            "ACCURACY OF  0.95  THRESHOLD :  0.98 \n",
            "\n",
            "ACCURACY OF  0.99  THRESHOLD :  1.0 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.metrics import confusion_matrix, accuracy_score # estiating the model\n",
        "from sklearn.linear_model import LinearRegression # use instead of logistic reg. to get probablistic output then use threshold to scale.\n",
        "\n",
        "# make an indivisual logistic_regression\n",
        "def Logistic_Regression(X_train,X_test,Y_train,Y_test,threshold = 0.5):\n",
        "    #fitting our model for current dataset\n",
        "    regressor = LinearRegression()\n",
        "    regressor.fit(X_train,Y_train)\n",
        "    #predict\n",
        "    Y_pred = regressor.predict(X_test)\n",
        "\n",
        "    Y_test_temp = copy.deepcopy(Y_test)\n",
        "    for index in range(0,len(Y_pred)):\n",
        "        if Y_pred[index] >= threshold:\n",
        "            Y_pred[index] = 1\n",
        "        else:\n",
        "            Y_pred[index] = 0\n",
        "    for index2 in range(0,len(Y_test)):\n",
        "        if Y_test[index2] >= threshold:\n",
        "            Y_test_temp[index2] = 1\n",
        "        else:\n",
        "            Y_test_temp[index2] = 0\n",
        "    return Y_test_temp,Y_pred\n",
        "\n",
        "# our threshold list\n",
        "threshold_list = [.05,.1,.15,.2,.25,.3,.35,.4,.45,.5,.55,.6,.65,.7,.75,.8,.85,.9,.95,.99]\n",
        "for i in threshold_list:\n",
        "    Y_test_temp,Y_pred = Logistic_Regression(X_train,X_test,Y_train,Y_test,threshold = i)\n",
        "\n",
        "    #now we can get the accuracy for current model\n",
        "    print(\"ACCURACY OF \",i,\" THRESHOLD : \",accuracy_score(Y_test_temp,Y_pred),'\\n')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.040367,
          "end_time": "2020-10-01T15:12:24.873747",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.833380",
          "status": "completed"
        },
        "tags": [],
        "id": "IR4byLNI6YaA"
      },
      "source": [
        "as we see here, we had some values but which one to pick is a challenging decision!?\n",
        "\n",
        "The most better one doesn't always lead to better regression or model. because it can force us to over-fitting.\n",
        "according to this, we can choose 0.6 or 0.7 for instance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:24.962104Z",
          "iopub.status.busy": "2020-10-01T15:12:24.961007Z",
          "iopub.status.idle": "2020-10-01T15:12:24.966040Z",
          "shell.execute_reply": "2020-10-01T15:12:24.966643Z"
        },
        "papermill": {
          "duration": 0.054586,
          "end_time": "2020-10-01T15:12:24.966849",
          "exception": false,
          "start_time": "2020-10-01T15:12:24.912263",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UBTK0nJv6YaA",
        "outputId": "05081891-7775-4da6-df11-952490c531c6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ACCURACY OF  0.75  THRESHOLD :  0.93 \n",
            "\n"
          ]
        }
      ],
      "source": [
        "Y_test,Y_pred = Logistic_Regression(X_train,X_test,Y_train,Y_test,threshold = 0.75)\n",
        "print(\"ACCURACY OF \",0.75 ,\" THRESHOLD : \",accuracy_score(Y_test,Y_pred),'\\n')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "execution": {
          "iopub.execute_input": "2020-10-01T15:12:25.054983Z",
          "iopub.status.busy": "2020-10-01T15:12:25.053935Z",
          "iopub.status.idle": "2020-10-01T15:12:25.058044Z",
          "shell.execute_reply": "2020-10-01T15:12:25.058576Z"
        },
        "papermill": {
          "duration": 0.050778,
          "end_time": "2020-10-01T15:12:25.058741",
          "exception": false,
          "start_time": "2020-10-01T15:12:25.007963",
          "status": "completed"
        },
        "tags": [],
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kzBpVXii6YaA",
        "outputId": "5fc5fd3a-3e3f-4070-9031-2ba11dec8fc2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[53  2]\n",
            " [ 5 40]]\n"
          ]
        }
      ],
      "source": [
        "# now lets see the confusion matrix of it\n",
        "cm = confusion_matrix(Y_test,Y_pred)\n",
        "print(cm)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.049146,
          "end_time": "2020-10-01T15:12:25.149120",
          "exception": false,
          "start_time": "2020-10-01T15:12:25.099974",
          "status": "completed"
        },
        "tags": [],
        "id": "eH6YkBCw6YaD"
      },
      "source": [
        "but if you are faced issues like this and also have a probablistc prediction with label class test set, you have to consider it with only words below:\n",
        "\n",
        "### The optimal cut off would be where tpr is high and fpr is low. tpr - (1-fpr) is zero or near to zero is the optimal cut off point."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.039839,
          "end_time": "2020-10-01T15:12:25.231393",
          "exception": false,
          "start_time": "2020-10-01T15:12:25.191554",
          "status": "completed"
        },
        "tags": [],
        "id": "e9IGPC5K6YaD"
      },
      "source": [
        "Regardless of what happened so far, you can use this model to predict weather you can get your \"ADMISSION\" from desired univerdity or not. hope you best of luck;)\n",
        "\n",
        "Thank you so much for reading my notebook.\n",
        "plaese send me feedback about my mistakes, i'll appreciate you, correct me.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "papermill": {
          "duration": 0.040893,
          "end_time": "2020-10-01T15:12:25.312003",
          "exception": false,
          "start_time": "2020-10-01T15:12:25.271110",
          "status": "completed"
        },
        "tags": [],
        "id": "yjlKBjj46YaD"
      },
      "source": [
        "# THE END.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "papermill": {
          "duration": 0.039378,
          "end_time": "2020-10-01T15:12:25.391564",
          "exception": false,
          "start_time": "2020-10-01T15:12:25.352186",
          "status": "completed"
        },
        "tags": [],
        "id": "LsHKlkAH6YaD"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6"
    },
    "papermill": {
      "duration": 13.069871,
      "end_time": "2020-10-01T15:12:25.540234",
      "environment_variables": {},
      "exception": null,
      "input_path": "__notebook__.ipynb",
      "output_path": "__notebook__.ipynb",
      "parameters": {},
      "start_time": "2020-10-01T15:12:12.470363",
      "version": "2.1.0"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
